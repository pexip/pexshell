[workspace]
members = ["lib", "test_helpers"]

[workspace.package]
version = "0.1.0"
edition = "2021"
rust-version = "1.70"
license = "BSD-3-Clause"

[workspace.dependencies]
anyhow = "1.0"
async-stream = "0.3.5"
async-trait = "0.1.80"
chrono = { version = "0.4.38", features = [
    "std",
    "clock",
    "serde",
], default-features = false } # for timestamps
console = "0.15.7" # colour stderr logging
futures = { version = "0.3.30", features = ["executor"] }
googletest = "0.11.0"
hyper = "1.3.1"
jsonwebtoken = "9.2"
log = { version = "0.4.22", features = ["std", "serde"] }
once_cell = "1.19"
parking_lot = "0.12.2"
reqwest = { version = "0.12.4", default-features = false, features = ["json"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_with = "3.8"
tokio = "1.37"
toml = "0.7.8"
url = { version = "2.5", features = ["serde"] }

# dev & test dependencies
http = "1.1"
mockall = "0.11.4"
test-case = "3.3"
uuid = { version = "1.9", features = ["v4"] }
wiremock = "0.6.0"


[package]
name = "pexshell"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
autotests = false
autobins = false

[[bin]]
name = "pexshell"
path = "src/main.rs"
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow.workspace = true
async-stream.workspace = true
async-trait.workspace = true
chrono.workspace = true
clap = { version = "4.4", features = ["wrap_help", "string"] }
clap_complete = "4.4"
clap_complete_nushell = "4.4"
colored_json = "4.1.0"
console.workspace = true
dialoguer = { version = "0.11.0", features = ["fuzzy-select"] }
directories = "5.0"
fslock = "0.2.1"
futures.workspace = true
git-version = "0.3.9"
is-terminal = "0.4.12" # for determining if stdout is a terminal (interactive)
keyring = "3.0"
lib = { package = "pex_lib", path = "lib", version = "0.1.0" }
log = { workspace = true, features = [
    # "max_level_trace",
    # "release_max_level_info", # may be useful for limiting logging in release builds, if we decide we want to do that
] }
once_cell.workspace = true
parking_lot.workspace = true
reqwest.workspace = true
serde.workspace = true
serde_json.workspace = true
tokio = { workspace = true, features = ["macros", "io-std"] }
toml.workspace = true

[target.'cfg(unix)'.dependencies]
simple-signal = "1.1"

[dev-dependencies]
assert-panic = "1.0"
googletest.workspace = true
jsonwebtoken.workspace = true
lib = { package = "pex_lib", path = "lib", version = "0.1.0", features = [
    "test_util",
] }
mockall.workspace = true
test-case.workspace = true
test_helpers = { path = "test_helpers" }
url.workspace = true
uuid.workspace = true
wiremock.workspace = true

[features]
default = ["rustls-native-certs"]
all_logs = ["lib/all_logs"]
ci = ["test_helpers/ci"]
rustls-native-certs = ["reqwest/rustls-tls-native-roots"]
rustls = ["reqwest/rustls-tls"]
